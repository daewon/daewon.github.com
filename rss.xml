<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[daewon's log]]></title><description><![CDATA[about Programming languages]]></description><link>http://daewon.github.com</link><image><url>http://daewon.github.com/public/img/favorite.png</url><title>daewon&apos;s log</title><link>http://daewon.github.com</link></image><generator>NodeJS RSS Module</generator><lastBuildDate>Mon, 17 Dec 2012 12:37:53 GMT</lastBuildDate><atom:link href="http://daewon.github.com/rss.xml" rel="self" type="application/rss+xml"/><item><title><![CDATA[What's the result of [1, 2, 3].map(parseInt)]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/201e7a836b57569bf241ddd73d90c3bf?r=pg&s=48.jpg&d=identicon"><br/><p><strong>[1, 2, 3].map(parseInt)를 실행하면 어떤 결과가 나올까?</strong></p><p><img src="/post/Array.prototype.map_with_parseInt/@img/map.png" alt="wrongresult "></p><p>결과는 [1, Nan, Nan]이 나오는데 원인은 map 함수의 구현과 가변 인자 때문에 발생한다. </p><p>먼저 아래 식에 실행 결과를 확인해 보자</p><pre><code class="javacript">[<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>].map( <span class="built_in">function</span>(v, i, o){ 
    <span class="keyword">return</span> parseInt(v) 
}; <span class="comment">// [1, 2, 3]</span>
</code></pre>]]></description><link>http://daewon.github.com/post/Array.prototype.map_with_parseInt</link><guid isPermaLink="false">Array.prototype.map_with_parseInt</guid><dc:creator><![CDATA[<a href="blueiur" target="_blank">daewon</a>]]></dc:creator><pubDate>Sun, 09 Dec 2012 15:02:00 GMT</pubDate></item><item><title><![CDATA[Next generation Java Programming Style]]></title><description><![CDATA[<img src="http://www.gravatar.com/avatar/201e7a836b57569bf241ddd73d90c3bf?r=pg&s=48.jpg&d=identicon"><br/><h3 id="toc_5"><a href="http://codemonkeyism.com/generation-java-programming-style/">차세대 자바 프로그래밍 스타일</a></h3>
<p>많은 회사와 개발자들이 자바로부터 새로운 언어인 <strong>Ruby, Python, Groovy, Erlang, Scala</strong> 등으로 이동했다.</p><p>여전히 자바를 사용하고 있을지 모르겠지만, 자바를 사용하더라도 프로그래밍 스타일을 바꿀 수 있고, 새로운 언어로부터 여러 이점을 취할 수 있다.</p><p>최근 15년 동안 자바의 프로그래밍 스타일은 매우 많이 변했다.</p>
<ul>
<li><strong>Final is your new love</strong></li>
</ul>
]]></description><link>http://daewon.github.com/post/next-generation-java-programming-style</link><guid isPermaLink="false">next-generation-java-programming-style</guid><dc:creator><![CDATA[<a href="blueiur" target="_blank">daewon</a>]]></dc:creator><pubDate>Sat, 01 May 2010 14:26:00 GMT</pubDate></item></channel></rss>